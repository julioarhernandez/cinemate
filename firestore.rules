rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow other authenticated users to read basic profile info for friend features
      allow read: if request.auth != null;
    }

    // Allow authenticated users to query users collection for finding friends by email
    match /users/{document=**} {
      allow list: if request.auth != null;
    }

    // Friend requests - more permissive rules for proper functionality
    match /friendRequests/{requestId} {
      // Allow users to read requests they sent or received
      allow read: if request.auth != null && 
                     (resource.data.to == request.auth.uid || 
                      resource.data.from == request.auth.uid);
      
      // Allow users to create requests they're sending
      allow create: if request.auth != null && 
                       request.resource.data.from == request.auth.uid &&
                       request.resource.data.keys().hasAll(["from", "to", "status"]);
      
      // Allow users to delete requests they sent or received
      allow delete: if request.auth != null && 
                       (resource.data.to == request.auth.uid || 
                        resource.data.from == request.auth.uid);
      
      // Allow updating status (though not used in your current code)
      allow update: if request.auth != null && 
                       resource.data.to == request.auth.uid &&
                       request.resource.data.keys().hasOnly(["status"]);
    }

    // Allow querying friend requests collection
    match /friendRequests/{document=**} {
      allow list: if request.auth != null;
    }

    // Friends lists - allow reading friend data for display
    match /users/{userId}/friends/{friendId} {
      // 1. Allow a user to manage their own friends list.
      // 2. Allow a user to be added to another's friends list if they have a pending request.
      allow write: if request.auth.uid == userId ||
                   (request.auth.uid == friendId && 
                    exists(/databases/$(database)/documents/friendRequests/$(request.resource.id)));
      
      // Allow a user to read their own friends list, or allow friends to read each other's basic info
      allow read: if request.auth.uid == userId ||
                   exists(/databases/$(database)/documents/users/$(request.auth.uid)/friends/$(userId));
      
      // Only allow a user to delete their own friends
      allow delete: if request.auth.uid == userId;
    }
    
    // Ratings & Watched list
    match /users/{userId}/ratings/{ratingId} {
      allow read, write: if request.auth.uid == userId;
      
      // Allow friends to read ratings for social features
      allow read: if request.auth != null && 
                     exists(/databases/$(database)/documents/users/$(request.auth.uid)/friends/$(userId));
    }

    // AI Recommendations history
    match /users/{userId}/recommendations/{recommendationId} {
       allow read, write: if request.auth.uid == userId;
    }
  }
}
