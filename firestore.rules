
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow other authenticated users to read basic profile info for friend features
      allow read: if request.auth != null;
    }

    // Allow authenticated users to query users collection for finding friends by email
    match /users/{document=**} {
      allow list: if request.auth != null;
    }

    // Friend requests
    match /friendRequests/{requestId} {
      // Allow listing (querying) if authenticated
      allow list: if request.auth != null;

      // Allow reading if you're sender or recipient
      allow read: if request.auth != null &&
                     (resource.data.to == request.auth.uid ||
                      resource.data.from == request.auth.uid);

      // Allow creating requests you send
      allow create: if request.auth != null &&
                       request.resource.data.from == request.auth.uid &&
                       request.resource.data.keys().hasAll(["from", "to", "status"]);

      // Allow deleting if you're sender or recipient
      allow delete: if request.auth != null &&
                       (resource.data.to == request.auth.uid ||
                        resource.data.from == request.auth.uid);

      // Allow updating only the status if you're the recipient
      allow update: if request.auth != null &&
                       resource.data.to == request.auth.uid &&
                       request.resource.data.keys().hasOnly(["status"]);
    }

    // Friends lists - allow reading friend data for display
    match /users/{userId}/friends/{friendId} {
    	allow write: if request.auth.uid == userId || request.auth.uid == friendId;
  
  		allow read: if request.auth.uid == userId ||
               exists(/databases/$(database)/documents/users/$(request.auth.uid)/friends/$(userId));

  		allow delete: if request.auth.uid == userId;  
		}
    
    // Ratings & Watched list
    match /users/{userId}/ratings/{ratingId} {
      // A user can read/write their own ratings.
      // A user can read a friend's rating only if it is not private.
      allow read, write: if request.auth.uid == userId;
      allow read: if exists(/databases/$(database)/documents/users/$(userId)/friends/$(request.auth.uid)) &&
                     resource.data.isPrivate != true;
    }
    
    // Public ratings collection for Friend Activity feed
    match /ratings/{ratingId} {
        // A user can create a rating if the userId matches their own.
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        
        // A user can read a rating if they are friends with the user who created it.
        allow read: if request.auth != null && 
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)/friends/$(resource.data.userId));
        
        // A user can update or delete their own ratings.
        allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // AI Recommendations history
    match /users/{userId}/recommendations/{recommendationId} {
       allow read, write: if request.auth.uid == userId;
    }
    
    // User-sent Recommendations history
    match /users/{userId}/sentRecommendations/{recommendationId} {
       allow read, write: if request.auth.uid == userId;
    }
    
   	// Incoming recommendations from friends
    match /users/{userId}/incomingRecommendations/{recommendationId} {
      allow read, write: if request.auth.uid == userId;
      
      // Allow a user to create a recommendation for another user (userId)
      // IF they are friends with that user.
      allow create: if request.auth != null &&
      								 request.resource.data.fromId == request.auth.uid &&
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)/friends/$(userId));
                       
    }
    // Stripe rules for customers
    match /customers/{uid} {
      allow read: if request.auth.uid == uid;

      match /checkout_sessions/{id} {
        allow read: if request.auth.uid == uid;
        // Allow any authenticated user to create a checkout session.
        // The server-side code will be creating this on behalf of the user.
        allow write: if request.auth != null;
      }
      match /subscriptions/{id} {
        allow read: if request.auth.uid == uid;
      }
      match /payments/{id} {
        allow read: if request.auth.uid == uid;
      }
    }
		// Stripe rules for products/plans
    match /products/{id} {
      allow read: if true;

      match /prices/{id} {
        allow read: if true;
      }

      match /tax_rates/{id} {
        allow read: if true;
      }
    }
  }
}
