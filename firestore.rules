rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow other authenticated users to read basic profile info for friend features
      allow read: if request.auth != null;
    }

    // Allow authenticated users to query users collection for finding friends by email
    match /users/{document=**} {
      allow list: if request.auth != null;
    }

    // Friend requests
    match /friendRequests/{requestId} {
      // Allow listing (querying) if authenticated
      allow list: if request.auth != null;

      // Allow reading if you're sender or recipient
      allow read: if request.auth != null &&
                     (resource.data.to == request.auth.uid ||
                      resource.data.from == request.auth.uid);

      // Allow creating requests you send
      allow create: if request.auth != null &&
                       request.resource.data.from == request.auth.uid &&
                       request.resource.data.keys().hasAll(["from", "to", "status"]);

      // Allow deleting if you're sender or recipient
      allow delete: if request.auth != null &&
                       (resource.data.to == request.auth.uid ||
                        resource.data.from == request.auth.uid);

      // Allow updating only the status if you're the recipient
      allow update: if request.auth != null &&
                       resource.data.to == request.auth.uid &&
                       request.resource.data.keys().hasOnly(["status"]);
    }

    // Friends lists
    match /users/{userId}/friends/{friendId} {
      allow write: if request.auth.uid == userId ||
                      (request.auth.uid == friendId && existsAfter(/databases/$(database)/documents/friendRequests/$(request.resource.id)));

      allow read: if request.auth.uid == userId ||
                   exists(/databases/$(database)/documents/users/$(request.auth.uid)/friends/$(userId));

      allow delete: if request.auth.uid == userId ||
                       (request.auth.uid == friendId && !existsAfter(/databases/$(database)/documents/users/$(userId)/friends/$(friendId)));
    }
    
    // Ratings & Watched list
    match /users/{userId}/ratings/{ratingId} {
      // Allow user to read/write their own ratings
      allow write: if request.auth.uid == userId;

      // Allow reading own ratings, OR friends' public ratings
      allow read: if request.auth.uid == userId ||
                   (
                     exists(/databases/$(database)/documents/users/$(userId)/friends/$(request.auth.uid)) &&
                     resource.data.isPrivate == false
                   );

      // Allow friends to query public ratings
      allow list: if exists(/databases/$(database)/documents/users/$(userId)/friends/$(request.auth.uid)) &&
                     request.query.filters.hasAny([
                       ['isPrivate', '==', false]
                     ]);
    }

    // AI Recommendations history
    match /users/{userId}/recommendations/{recommendationId} {
       allow read, write: if request.auth.uid == userId;
    }
  }
}
