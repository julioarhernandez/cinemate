rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read/write their own profile and friends list
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Allow other authenticated users to read basic profile info for friend features
      allow read: if request.auth != null;
    }

    // Allow authenticated users to query users collection for finding friends by email
    match /users/{document=**} {
      allow list: if request.auth != null;
    }
    
    // Rules for friend subcollections
    match /users/{userId}/friends/{friendId} {
      // User can read/write/delete their OWN friends list
      allow read, write, delete: if request.auth.uid == userId;

      // A user can be added to another user's friends list (write)
      // ONLY IF there is a pending friend request from them.
      // This is crucial for the "accept request" batch operation to succeed.
      // Here, {userId} is the person being written to, and {friendId} is the person being added.
      // The person performing the request is request.auth.uid.
      allow write: if request.auth != null && exists(/databases/$(database)/documents/friendRequests/{requestId})
                   && get(/databases/$(database)/documents/friendRequests/{requestId}).data.from == userId
                   && get(/databases/$(database)/documents/friendRequests/{requestId}).data.to == request.auth.uid
                   && get(/databases/$(database)/documents/friendRequests/{requestId}).data.status == 'pending';
    }

    // Friend requests
    match /friendRequests/{requestId} {
      // Allow users to read requests they sent or received
      allow read: if request.auth != null && 
                     (resource.data.to == request.auth.uid || 
                      resource.data.from == request.auth.uid);
      
      // Allow users to create requests they are sending
      allow create: if request.auth != null && 
                       request.resource.data.from == request.auth.uid;
      
      // Allow users to delete requests they sent or received (for cancelling, accepting)
      allow delete: if request.auth != null && 
                       (resource.data.to == request.auth.uid || 
                        resource.data.from == request.auth.uid);
      
      // Allow a user to update a request to 'declined' if they are the recipient
      allow update: if request.auth != null && 
                       resource.data.to == request.auth.uid &&
                       request.resource.data.status == 'declined';
    }
    
    // Ratings & Watched list
    match /users/{userId}/ratings/{ratingId} {
      allow read, write: if request.auth.uid == userId;
      
      // Allow friends to read ratings for social features
      allow read: if request.auth != null && 
                     exists(/databases/$(database)/documents/users/$(request.auth.uid)/friends/$(userId));
    }

    // AI Recommendations history
    match /users/{userId}/recommendations/{recommendationId} {
       allow read, write: if request.auth.uid == userId;
    }
  }
}