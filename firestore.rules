rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read and write their own user document.
    // Other authenticated users can read it (for searching/displaying friend info).
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow get: if request.auth != null;
    }

    // Authenticated users can list users (needed for email search).
    match /users/{document=**} {
      allow list: if request.auth != null;
    }

    // Rules for creating, reading, and deleting friend requests.
    match /friendRequests/{requestId} {
      // Users can read requests they sent or received.
      allow read: if request.auth != null && 
                     (resource.data.to == request.auth.uid || resource.data.from == request.auth.uid);
      
      // Users can create requests they are sending.
      allow create: if request.auth != null && 
                       request.resource.data.from == request.auth.uid;
      
      // Users can delete requests they sent (cancel) or received (accept/decline).
      allow delete: if request.auth != null && 
                       (resource.data.to == request.auth.uid || resource.data.from == request.auth.uid);
      
      // Allow a user to update a request to 'declined' if they are the recipient.
      allow update: if request.auth != null && 
                       resource.data.to == request.auth.uid &&
                       request.resource.data.status == 'declined';
    }

    // Rules for a user's friends subcollection.
    match /users/{userId}/friends/{friendId} {
      // Allow read access if the user is reading their own friends list, 
      // OR if the requesting user is already a friend.
      allow read: if request.auth.uid == userId ||
                   exists(/databases/$(database)/documents/users/$(request.auth.uid)/friends/$(userId));

      // Allow write access (adding a friend) if:
      // 1. The user is modifying their own friends list.
      // 2. The user is being added to the list, AND a pending friend request exists from them to the list owner.
      // This is the key rule that allows the batch write to succeed.
      allow write: if request.auth.uid == userId ||
                    (request.auth.uid == friendId &&
                     exists(/databases/$(database)/documents/friendRequests/{requestId}) &&
                     get(/databases/$(database)/documents/friendRequests/$(requestId)).data.from == friendId &&
                     get(/databases/$(database)/documents/friendRequests/$(requestId)).data.to == userId);

      // Only allow a user to delete from their own friends list.
      allow delete: if request.auth.uid == userId;
    }
    
    // Ratings & Watched list
    match /users/{userId}/ratings/{ratingId} {
      // User can manage their own ratings.
      allow read, write: if request.auth.uid == userId;
      
      // Friends can read each other's ratings.
      allow read: if request.auth != null && 
                     exists(/databases/$(database)/documents/users/$(request.auth.uid)/friends/$(userId));
    }

    // AI Recommendations history
    match /users/{userId}/recommendations/{recommendationId} {
       allow read, write: if request.auth.uid == userId;
    }
  }
}
